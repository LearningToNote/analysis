SET SCHEMA LEARNING_TO_NOTE;

DROP PROCEDURE "LEARNING_TO_NOTE"."LTN::CREATE_SVM_DATA";

CREATE PROCEDURE "LEARNING_TO_NOTE"."LTN::CREATE_SVM_DATA" (OUT train_data TT_COMMON_WORDS_INBETWEEN,
                                                            OUT test_data TT_COMMON_WORDS_INBETWEEN)
  LANGUAGE SQLSCRIPT
  SQL SECURITY INVOKER
  DEFAULT SCHEMA "LEARNING_TO_NOTE" AS
BEGIN

  DECLARE true_values_count INT;

  CREATE LOCAL TEMPORARY COLUMN TABLE #TRUE_VALUES AS (
      SELECT *
      FROM SVM_RAW_DATA
      WHERE DDI = 1
  );

  CREATE LOCAL TEMPORARY COLUMN TABLE #FALSE_VALUES AS (
      SELECT *
      FROM SVM_RAW_DATA
      WHERE DDI = 0
  );

  SELECT COUNT(*) INTO true_values_count FROM #TRUE_VALUES;

  CREATE LOCAL TEMPORARY COLUMN TABLE #DOWNSAMPLED_VALUES LIKE #TRUE_VALUES;

  INSERT INTO #DOWNSAMPLED_VALUES (
    SELECT * FROM (
        SELECT * FROM #TRUE_VALUES
        UNION ALL
        select f.*
            FROM #FALSE_VALUES f JOIN (SELECT ID, ROW_NUMBER() OVER() AS N FROM
            #FALSE_VALUES TABLESAMPLE SYSTEM(100)) K ON
            F.ID = K.ID
            AND K.N < :true_values_count
      )
  );

  train_data = SELECT * FROM #DOWNSAMPLED_VALUES TABLESAMPLE SYSTEM(100) LIMIT 1000;
  test_data = SELECT * FROM #DOWNSAMPLED_VALUES WHERE ID NOT IN (SELECT ID FROM :train_data);

  DROP TABLE #TRUE_VALUES;
  DROP TABLE #FALSE_VALUES;
  DROP TABLE #DOWNSAMPLED_VALUES;



END;


--create column table foo like TT_COMMON_WORDS_INBETWEEN;
--create column table bar like TT_COMMON_WORDS_INBETWEEN;
TRUNCATE TABLE FOO;
TRUNCATE TABLE BAR;

call "LEARNING_TO_NOTE"."LTN::CREATE_SVM_DATA"(foo, bar) WITH OVERVIEW;

SELECT count(*), DDI from FOO group by DDI;
SELECT count(*), DDI from BAR group by DDI;

--DROP TABLE FOO;
--DROP TABLE BAR;

TRUNCATE TABLE FOO;
TRUNCATE TABLE BAR;
